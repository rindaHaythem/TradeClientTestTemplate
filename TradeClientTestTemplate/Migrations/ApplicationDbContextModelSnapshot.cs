// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeClientTestTemplate.Data;

namespace TradeClientTestTemplate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TradeClientTestTemplate.Models.Account", b =>
                {
                    b.Property<string>("accountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("accountFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("accountSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("accountId");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("TradeClientTestTemplate.Models.EquitiesSymbols", b =>
                {
                    b.Property<int>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SymbolId");

                    b.ToTable("EquitiesSymbols");
                });

            modelBuilder.Entity("TradeClientTestTemplate.Models.Order", b =>
                {
                    b.Property<int>("portfolioManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClOrdId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquityFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeInForce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateGTD")
                        .HasColumnType("datetime2");

                    b.Property<int>("filled")
                        .HasColumnType("int");

                    b.Property<int>("leaves")
                        .HasColumnType("int");

                    b.Property<string>("limitPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ordered")
                        .HasColumnType("int");

                    b.Property<int>("placed")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("stopPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("trader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uncommited")
                        .HasColumnType("int");

                    b.HasKey("portfolioManagerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TradeClientTestTemplate.Models.Trader", b =>
                {
                    b.Property<string>("traderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("traderFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("traderSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("traderId");

                    b.ToTable("traders");
                });

            modelBuilder.Entity("TradeClientTestTemplate.Models.TraderAccount", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TraderID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountID", "TraderID");

                    b.HasIndex("TraderID");

                    b.ToTable("TradersAccounts");
                });

            modelBuilder.Entity("TradeClientTestTemplate.Models.TraderAccount", b =>
                {
                    b.HasOne("TradeClientTestTemplate.Models.Account", "Account")
                        .WithMany("TraderAccounts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeClientTestTemplate.Models.Trader", "Trader")
                        .WithMany("TraderAccounts")
                        .HasForeignKey("TraderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TradeClientTestTemplate.Models.Account", b =>
                {
                    b.Navigation("TraderAccounts");
                });

            modelBuilder.Entity("TradeClientTestTemplate.Models.Trader", b =>
                {
                    b.Navigation("TraderAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
